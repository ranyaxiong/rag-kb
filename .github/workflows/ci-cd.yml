name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort
        pip install -r requirements.txt

    - name: Run Black (code formatting)
      run: black --check --diff app/ tests/

    - name: Run isort (import sorting)
      run: isort --check-only --diff app/ tests/

    - name: Run Flake8 (linting)
      run: flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503

  # 单元测试
  test:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test directories
      run: |
        mkdir -p data/uploads data/chroma_db logs

    - name: Run tests
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST || 'test-key' }}
        PYTHONPATH: .
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml
          pytest.xml

  # 安全检查
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit (security linting)
      run: bandit -r app/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety (dependency security check)
      run: safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # 构建Docker镜像
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract backend metadata
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract frontend metadata
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to development
      run: |
        echo "Deploying to development environment..."
        echo "Backend image: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build.outputs.frontend-image }}"
        # 这里添加实际的部署脚本
        # 例如：kubectl apply -f k8s/dev/ 或 docker-compose up -d

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # 添加基本的健康检查
        # curl -f http://dev.example.com/health || exit 1

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Development deployment successful"
        else
          echo "❌ Development deployment failed"
        fi

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Backend image: ${{ needs.build.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build.outputs.frontend-image }}"
        # 添加生产环境部署脚本

    - name: Run production health check
      run: |
        echo "Running production health checks..."
        # 添加生产环境健康检查

    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## 🚀 自动发布
          
          **部署时间:** ${{ github.event.head_commit.timestamp }}
          **提交SHA:** ${{ github.sha }}
          **提交信息:** ${{ github.event.head_commit.message }}
          
          ### 🐳 Docker镜像
          - Backend: `${{ needs.build.outputs.backend-image }}`
          - Frontend: `${{ needs.build.outputs.frontend-image }}`
        draft: false
        prerelease: false

  # 性能测试（可选）
  performance:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # 可以集成 Apache Bench, k6, 或其他性能测试工具
        # ab -n 100 -c 10 http://dev.example.com/api/health

    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # 生成性能测试报告

  # 清理旧的构建产物
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-dev, deploy-prod]
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          
          // 清理超过30天的构建产物
          const thirtyDaysAgo = new Date(Date.now() - (30 * 24 * 60 * 60 * 1000));
          
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner,
            repo,
            per_page: 100
          });
          
          for (const artifact of artifacts.data.artifacts) {
            if (new Date(artifact.created_at) < thirtyDaysAgo) {
              console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
              await github.rest.actions.deleteArtifact({
                owner,
                repo,
                artifact_id: artifact.id
              });
            }
          }